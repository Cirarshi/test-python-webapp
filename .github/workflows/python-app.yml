# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main", "staging" ]
  pull_request:
    branches: [ "main" ]
  release:
    types: [published]

permissions:
  contents: read

jobs:
  build-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest

deploy-staging:
  if: githuib.ref == 'refs/heads/staging'
  runs-on: ubuntu-latest
  needs: build-test

  steps:
      - uses: actions/checkout@v4

      - name: Deploy to Staging Server
        run: |
          echo "Deploying to staging..."
          ssh -o StrictHostKeyChecking=no ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} << 'EOF'
          cd /path/to/app
          git pull origin staging
          source venv/bin/activate
          pip install -r requirements.txt
          systemctl restart flask-app
          EOF

  deploy-production:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: build-test

    steps:
      - uses: actions/checkout@v4

      - name: Deploy to Production Server
        run: |
          echo "Deploying to production..."
          ssh -o StrictHostKeyChecking=no ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }} << 'EOF'
          cd /path/to/app
          git pull origin main
          source venv/bin/activate
          pip install -r requirements.txt
          systemctl restart flask-app
          EOF
